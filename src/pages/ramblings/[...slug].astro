---
import { getCollection, type CollectionEntry } from "astro:content";
export async function getStaticPaths() {
  const entries = await getCollection("ramblings");
  return entries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

import Prose from "../../layouts/prose.astro";

import { Icon } from "astro-icon/components";

const { entry } = Astro.props as { entry: CollectionEntry<"ramblings"> };
const { Content } = await entry.render();

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
---

<Prose title={entry.data.title}>
  <Fragment slot="extra-head">
    <link rel="canonical" href={canonicalURL} />

    <meta property="og:title" content={entry.data.title} />
    <meta property="og:type" content="article" />
    <meta property="og:description" content={entry.data.summary} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={`${Astro.site}favicon.png`} />

    <meta property="article:published_time" content={entry.data.date.toISOString()} />
    {
      entry.data.tags.map((tag) => (
        <meta property="article:tag" content={tag} />
      ))
    }
  </Fragment>

  <header class="not-prose flex flex-col gap-2">
    <h1 class="text-4xl font-extrabold">
      {entry.data.title}
    </h1>
    <div class="text-sm text-subtext1 flex gap-1 items-center">
      <Icon name="fluent:tag-16-regular" class="size-5" aria-label="Tags" />
      {
        entry.data.tags.map((tag) => (
          <a class="text-blue" href={`/tagged/${tag}`}>
            {tag}
          </a>
        ))
      }
    </div>
    <div class="text-sm text-subtext1 flex gap-1 items-center">
      <Icon
        name="fluent:calendar-date-20-regular"
        class="size-5"
        aria-label="Date"
      />
      {entry.data.date.toDateString()}
    </div>
  </header>
  <Content />
</Prose>
